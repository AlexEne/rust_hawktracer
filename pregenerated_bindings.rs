/* automatically generated by rust-bindgen */

pub const HT_VERSION: &'static [u8; 6usize] = b"0.5.0\x00";
pub const HT_VERSION_MAJOR: ::std::os::raw::c_uint = 0;
pub const HT_VERSION_MINOR: ::std::os::raw::c_uint = 5;
pub const HT_VERSION_PATCH: ::std::os::raw::c_uint = 0;
pub const _SAL_VERSION: ::std::os::raw::c_uint = 20;
pub const __SAL_H_VERSION: ::std::os::raw::c_uint = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: ::std::os::raw::c_uint = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: ::std::os::raw::c_uint = 0;
pub const _CRT_PACKING: ::std::os::raw::c_uint = 8;
pub const _HAS_EXCEPTIONS: ::std::os::raw::c_uint = 1;
pub const _ARGMAX: ::std::os::raw::c_uint = 100;
pub const _CRT_INT_MAX: ::std::os::raw::c_uint = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: ::std::os::raw::c_uint = 1;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: ::std::os::raw::c_uint
          =
    0;
pub const _CRT_BUILD_DESKTOP_APP: ::std::os::raw::c_uint = 1;
pub const __STDC_SECURE_LIB__: ::std::os::raw::c_uint = 200411;
pub const __GOT_SECURE_LIB__: ::std::os::raw::c_uint = 200411;
pub const __STDC_WANT_SECURE_LIB__: ::std::os::raw::c_uint = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: ::std::os::raw::c_uint = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: ::std::os::raw::c_uint = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT:
          ::std::os::raw::c_uint =
    0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: ::std::os::raw::c_uint = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY:
          ::std::os::raw::c_uint =
    0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: ::std::os::raw::c_uint
          =
    0;
pub const WCHAR_MIN: ::std::os::raw::c_uint = 0;
pub const WCHAR_MAX: ::std::os::raw::c_uint = 65535;
pub const WINT_MIN: ::std::os::raw::c_uint = 0;
pub const WINT_MAX: ::std::os::raw::c_uint = 65535;
pub const PRId8: &'static [u8; 4usize] = b"hhd\x00";
pub const PRId16: &'static [u8; 3usize] = b"hd\x00";
pub const PRId32: &'static [u8; 2usize] = b"d\x00";
pub const PRId64: &'static [u8; 4usize] = b"lld\x00";
pub const PRIdLEAST8: &'static [u8; 4usize] = b"hhd\x00";
pub const PRIdLEAST16: &'static [u8; 3usize] = b"hd\x00";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\x00";
pub const PRIdLEAST64: &'static [u8; 4usize] = b"lld\x00";
pub const PRIdFAST8: &'static [u8; 4usize] = b"hhd\x00";
pub const PRIdFAST16: &'static [u8; 2usize] = b"d\x00";
pub const PRIdFAST32: &'static [u8; 2usize] = b"d\x00";
pub const PRIdFAST64: &'static [u8; 4usize] = b"lld\x00";
pub const PRIdMAX: &'static [u8; 4usize] = b"lld\x00";
pub const PRIdPTR: &'static [u8; 4usize] = b"lld\x00";
pub const PRIi8: &'static [u8; 4usize] = b"hhi\x00";
pub const PRIi16: &'static [u8; 3usize] = b"hi\x00";
pub const PRIi32: &'static [u8; 2usize] = b"i\x00";
pub const PRIi64: &'static [u8; 4usize] = b"lli\x00";
pub const PRIiLEAST8: &'static [u8; 4usize] = b"hhi\x00";
pub const PRIiLEAST16: &'static [u8; 3usize] = b"hi\x00";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\x00";
pub const PRIiLEAST64: &'static [u8; 4usize] = b"lli\x00";
pub const PRIiFAST8: &'static [u8; 4usize] = b"hhi\x00";
pub const PRIiFAST16: &'static [u8; 2usize] = b"i\x00";
pub const PRIiFAST32: &'static [u8; 2usize] = b"i\x00";
pub const PRIiFAST64: &'static [u8; 4usize] = b"lli\x00";
pub const PRIiMAX: &'static [u8; 4usize] = b"lli\x00";
pub const PRIiPTR: &'static [u8; 4usize] = b"lli\x00";
pub const PRIo8: &'static [u8; 4usize] = b"hho\x00";
pub const PRIo16: &'static [u8; 3usize] = b"ho\x00";
pub const PRIo32: &'static [u8; 2usize] = b"o\x00";
pub const PRIo64: &'static [u8; 4usize] = b"llo\x00";
pub const PRIoLEAST8: &'static [u8; 4usize] = b"hho\x00";
pub const PRIoLEAST16: &'static [u8; 3usize] = b"ho\x00";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\x00";
pub const PRIoLEAST64: &'static [u8; 4usize] = b"llo\x00";
pub const PRIoFAST8: &'static [u8; 4usize] = b"hho\x00";
pub const PRIoFAST16: &'static [u8; 2usize] = b"o\x00";
pub const PRIoFAST32: &'static [u8; 2usize] = b"o\x00";
pub const PRIoFAST64: &'static [u8; 4usize] = b"llo\x00";
pub const PRIoMAX: &'static [u8; 4usize] = b"llo\x00";
pub const PRIoPTR: &'static [u8; 4usize] = b"llo\x00";
pub const PRIu8: &'static [u8; 4usize] = b"hhu\x00";
pub const PRIu16: &'static [u8; 3usize] = b"hu\x00";
pub const PRIu32: &'static [u8; 2usize] = b"u\x00";
pub const PRIu64: &'static [u8; 4usize] = b"llu\x00";
pub const PRIuLEAST8: &'static [u8; 4usize] = b"hhu\x00";
pub const PRIuLEAST16: &'static [u8; 3usize] = b"hu\x00";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\x00";
pub const PRIuLEAST64: &'static [u8; 4usize] = b"llu\x00";
pub const PRIuFAST8: &'static [u8; 4usize] = b"hhu\x00";
pub const PRIuFAST16: &'static [u8; 2usize] = b"u\x00";
pub const PRIuFAST32: &'static [u8; 2usize] = b"u\x00";
pub const PRIuFAST64: &'static [u8; 4usize] = b"llu\x00";
pub const PRIuMAX: &'static [u8; 4usize] = b"llu\x00";
pub const PRIuPTR: &'static [u8; 4usize] = b"llu\x00";
pub const PRIx8: &'static [u8; 4usize] = b"hhx\x00";
pub const PRIx16: &'static [u8; 3usize] = b"hx\x00";
pub const PRIx32: &'static [u8; 2usize] = b"x\x00";
pub const PRIx64: &'static [u8; 4usize] = b"llx\x00";
pub const PRIxLEAST8: &'static [u8; 4usize] = b"hhx\x00";
pub const PRIxLEAST16: &'static [u8; 3usize] = b"hx\x00";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\x00";
pub const PRIxLEAST64: &'static [u8; 4usize] = b"llx\x00";
pub const PRIxFAST8: &'static [u8; 4usize] = b"hhx\x00";
pub const PRIxFAST16: &'static [u8; 2usize] = b"x\x00";
pub const PRIxFAST32: &'static [u8; 2usize] = b"x\x00";
pub const PRIxFAST64: &'static [u8; 4usize] = b"llx\x00";
pub const PRIxMAX: &'static [u8; 4usize] = b"llx\x00";
pub const PRIxPTR: &'static [u8; 4usize] = b"llx\x00";
pub const PRIX8: &'static [u8; 4usize] = b"hhX\x00";
pub const PRIX16: &'static [u8; 3usize] = b"hX\x00";
pub const PRIX32: &'static [u8; 2usize] = b"X\x00";
pub const PRIX64: &'static [u8; 4usize] = b"llX\x00";
pub const PRIXLEAST8: &'static [u8; 4usize] = b"hhX\x00";
pub const PRIXLEAST16: &'static [u8; 3usize] = b"hX\x00";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\x00";
pub const PRIXLEAST64: &'static [u8; 4usize] = b"llX\x00";
pub const PRIXFAST8: &'static [u8; 4usize] = b"hhX\x00";
pub const PRIXFAST16: &'static [u8; 2usize] = b"X\x00";
pub const PRIXFAST32: &'static [u8; 2usize] = b"X\x00";
pub const PRIXFAST64: &'static [u8; 4usize] = b"llX\x00";
pub const PRIXMAX: &'static [u8; 4usize] = b"llX\x00";
pub const PRIXPTR: &'static [u8; 4usize] = b"llX\x00";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\x00";
pub const SCNd16: &'static [u8; 3usize] = b"hd\x00";
pub const SCNd32: &'static [u8; 2usize] = b"d\x00";
pub const SCNd64: &'static [u8; 4usize] = b"lld\x00";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\x00";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\x00";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\x00";
pub const SCNdLEAST64: &'static [u8; 4usize] = b"lld\x00";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\x00";
pub const SCNdFAST16: &'static [u8; 2usize] = b"d\x00";
pub const SCNdFAST32: &'static [u8; 2usize] = b"d\x00";
pub const SCNdFAST64: &'static [u8; 4usize] = b"lld\x00";
pub const SCNdMAX: &'static [u8; 4usize] = b"lld\x00";
pub const SCNdPTR: &'static [u8; 4usize] = b"lld\x00";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\x00";
pub const SCNi16: &'static [u8; 3usize] = b"hi\x00";
pub const SCNi32: &'static [u8; 2usize] = b"i\x00";
pub const SCNi64: &'static [u8; 4usize] = b"lli\x00";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\x00";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\x00";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\x00";
pub const SCNiLEAST64: &'static [u8; 4usize] = b"lli\x00";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\x00";
pub const SCNiFAST16: &'static [u8; 2usize] = b"i\x00";
pub const SCNiFAST32: &'static [u8; 2usize] = b"i\x00";
pub const SCNiFAST64: &'static [u8; 4usize] = b"lli\x00";
pub const SCNiMAX: &'static [u8; 4usize] = b"lli\x00";
pub const SCNiPTR: &'static [u8; 4usize] = b"lli\x00";
pub const SCNo8: &'static [u8; 4usize] = b"hho\x00";
pub const SCNo16: &'static [u8; 3usize] = b"ho\x00";
pub const SCNo32: &'static [u8; 2usize] = b"o\x00";
pub const SCNo64: &'static [u8; 4usize] = b"llo\x00";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\x00";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\x00";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\x00";
pub const SCNoLEAST64: &'static [u8; 4usize] = b"llo\x00";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\x00";
pub const SCNoFAST16: &'static [u8; 2usize] = b"o\x00";
pub const SCNoFAST32: &'static [u8; 2usize] = b"o\x00";
pub const SCNoFAST64: &'static [u8; 4usize] = b"llo\x00";
pub const SCNoMAX: &'static [u8; 4usize] = b"llo\x00";
pub const SCNoPTR: &'static [u8; 4usize] = b"llo\x00";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\x00";
pub const SCNu16: &'static [u8; 3usize] = b"hu\x00";
pub const SCNu32: &'static [u8; 2usize] = b"u\x00";
pub const SCNu64: &'static [u8; 4usize] = b"llu\x00";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\x00";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\x00";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\x00";
pub const SCNuLEAST64: &'static [u8; 4usize] = b"llu\x00";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\x00";
pub const SCNuFAST16: &'static [u8; 2usize] = b"u\x00";
pub const SCNuFAST32: &'static [u8; 2usize] = b"u\x00";
pub const SCNuFAST64: &'static [u8; 4usize] = b"llu\x00";
pub const SCNuMAX: &'static [u8; 4usize] = b"llu\x00";
pub const SCNuPTR: &'static [u8; 4usize] = b"llu\x00";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\x00";
pub const SCNx16: &'static [u8; 3usize] = b"hx\x00";
pub const SCNx32: &'static [u8; 2usize] = b"x\x00";
pub const SCNx64: &'static [u8; 4usize] = b"llx\x00";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\x00";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\x00";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\x00";
pub const SCNxLEAST64: &'static [u8; 4usize] = b"llx\x00";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\x00";
pub const SCNxFAST16: &'static [u8; 2usize] = b"x\x00";
pub const SCNxFAST32: &'static [u8; 2usize] = b"x\x00";
pub const SCNxFAST64: &'static [u8; 4usize] = b"llx\x00";
pub const SCNxMAX: &'static [u8; 4usize] = b"llx\x00";
pub const SCNxPTR: &'static [u8; 4usize] = b"llx\x00";
pub const HT_TRUE: ::std::os::raw::c_uint = 1;
pub const HT_FALSE: ::std::os::raw::c_uint = 0;
pub const HT_TIMELINE_MAX_FEATURES: ::std::os::raw::c_uint = 32;
pub const EPERM: ::std::os::raw::c_uint = 1;
pub const ENOENT: ::std::os::raw::c_uint = 2;
pub const ESRCH: ::std::os::raw::c_uint = 3;
pub const EINTR: ::std::os::raw::c_uint = 4;
pub const EIO: ::std::os::raw::c_uint = 5;
pub const ENXIO: ::std::os::raw::c_uint = 6;
pub const E2BIG: ::std::os::raw::c_uint = 7;
pub const ENOEXEC: ::std::os::raw::c_uint = 8;
pub const EBADF: ::std::os::raw::c_uint = 9;
pub const ECHILD: ::std::os::raw::c_uint = 10;
pub const EAGAIN: ::std::os::raw::c_uint = 11;
pub const ENOMEM: ::std::os::raw::c_uint = 12;
pub const EACCES: ::std::os::raw::c_uint = 13;
pub const EFAULT: ::std::os::raw::c_uint = 14;
pub const EBUSY: ::std::os::raw::c_uint = 16;
pub const EEXIST: ::std::os::raw::c_uint = 17;
pub const EXDEV: ::std::os::raw::c_uint = 18;
pub const ENODEV: ::std::os::raw::c_uint = 19;
pub const ENOTDIR: ::std::os::raw::c_uint = 20;
pub const EISDIR: ::std::os::raw::c_uint = 21;
pub const ENFILE: ::std::os::raw::c_uint = 23;
pub const EMFILE: ::std::os::raw::c_uint = 24;
pub const ENOTTY: ::std::os::raw::c_uint = 25;
pub const EFBIG: ::std::os::raw::c_uint = 27;
pub const ENOSPC: ::std::os::raw::c_uint = 28;
pub const ESPIPE: ::std::os::raw::c_uint = 29;
pub const EROFS: ::std::os::raw::c_uint = 30;
pub const EMLINK: ::std::os::raw::c_uint = 31;
pub const EPIPE: ::std::os::raw::c_uint = 32;
pub const EDOM: ::std::os::raw::c_uint = 33;
pub const EDEADLK: ::std::os::raw::c_uint = 36;
pub const ENAMETOOLONG: ::std::os::raw::c_uint = 38;
pub const ENOLCK: ::std::os::raw::c_uint = 39;
pub const ENOSYS: ::std::os::raw::c_uint = 40;
pub const ENOTEMPTY: ::std::os::raw::c_uint = 41;
pub const EINVAL: ::std::os::raw::c_uint = 22;
pub const ERANGE: ::std::os::raw::c_uint = 34;
pub const EILSEQ: ::std::os::raw::c_uint = 42;
pub const STRUNCATE: ::std::os::raw::c_uint = 80;
pub const EDEADLOCK: ::std::os::raw::c_uint = 36;
pub const EADDRINUSE: ::std::os::raw::c_uint = 100;
pub const EADDRNOTAVAIL: ::std::os::raw::c_uint = 101;
pub const EAFNOSUPPORT: ::std::os::raw::c_uint = 102;
pub const EALREADY: ::std::os::raw::c_uint = 103;
pub const EBADMSG: ::std::os::raw::c_uint = 104;
pub const ECANCELED: ::std::os::raw::c_uint = 105;
pub const ECONNABORTED: ::std::os::raw::c_uint = 106;
pub const ECONNREFUSED: ::std::os::raw::c_uint = 107;
pub const ECONNRESET: ::std::os::raw::c_uint = 108;
pub const EDESTADDRREQ: ::std::os::raw::c_uint = 109;
pub const EHOSTUNREACH: ::std::os::raw::c_uint = 110;
pub const EIDRM: ::std::os::raw::c_uint = 111;
pub const EINPROGRESS: ::std::os::raw::c_uint = 112;
pub const EISCONN: ::std::os::raw::c_uint = 113;
pub const ELOOP: ::std::os::raw::c_uint = 114;
pub const EMSGSIZE: ::std::os::raw::c_uint = 115;
pub const ENETDOWN: ::std::os::raw::c_uint = 116;
pub const ENETRESET: ::std::os::raw::c_uint = 117;
pub const ENETUNREACH: ::std::os::raw::c_uint = 118;
pub const ENOBUFS: ::std::os::raw::c_uint = 119;
pub const ENODATA: ::std::os::raw::c_uint = 120;
pub const ENOLINK: ::std::os::raw::c_uint = 121;
pub const ENOMSG: ::std::os::raw::c_uint = 122;
pub const ENOPROTOOPT: ::std::os::raw::c_uint = 123;
pub const ENOSR: ::std::os::raw::c_uint = 124;
pub const ENOSTR: ::std::os::raw::c_uint = 125;
pub const ENOTCONN: ::std::os::raw::c_uint = 126;
pub const ENOTRECOVERABLE: ::std::os::raw::c_uint = 127;
pub const ENOTSOCK: ::std::os::raw::c_uint = 128;
pub const ENOTSUP: ::std::os::raw::c_uint = 129;
pub const EOPNOTSUPP: ::std::os::raw::c_uint = 130;
pub const EOTHER: ::std::os::raw::c_uint = 131;
pub const EOVERFLOW: ::std::os::raw::c_uint = 132;
pub const EOWNERDEAD: ::std::os::raw::c_uint = 133;
pub const EPROTO: ::std::os::raw::c_uint = 134;
pub const EPROTONOSUPPORT: ::std::os::raw::c_uint = 135;
pub const EPROTOTYPE: ::std::os::raw::c_uint = 136;
pub const ETIME: ::std::os::raw::c_uint = 137;
pub const ETIMEDOUT: ::std::os::raw::c_uint = 138;
pub const ETXTBSY: ::std::os::raw::c_uint = 139;
pub const EWOULDBLOCK: ::std::os::raw::c_uint = 140;
pub const _NLSCMPERROR: ::std::os::raw::c_uint = 2147483647;
pub const HT_FEATURE_CACHED_STRING: ::std::os::raw::c_uint = 1;
pub const HT_FEATURE_CALLSTACK: ::std::os::raw::c_uint = 0;
pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: &'static [u8; 1usize] = b"\x00";
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION:
          ::std::os::raw::c_uint =
    1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR:
          ::std::os::raw::c_uint =
    2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: ::std::os::raw::c_uint
          =
    4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY:
          ::std::os::raw::c_uint =
    8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS:
          ::std::os::raw::c_uint =
    16;
pub const _CRT_INTERNAL_SCANF_SECURECRT: ::std::os::raw::c_uint = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: ::std::os::raw::c_uint =
    2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY:
          ::std::os::raw::c_uint =
    4;
pub const BUFSIZ: ::std::os::raw::c_uint = 512;
pub const _NSTREAM_: ::std::os::raw::c_uint = 512;
pub const _IOB_ENTRIES: ::std::os::raw::c_uint = 3;
pub const EOF: ::std::os::raw::c_int = -1;
pub const _IOFBF: ::std::os::raw::c_uint = 0;
pub const _IOLBF: ::std::os::raw::c_uint = 64;
pub const _IONBF: ::std::os::raw::c_uint = 4;
pub const L_tmpnam: ::std::os::raw::c_uint = 260;
pub const L_tmpnam_s: ::std::os::raw::c_uint = 260;
pub const SEEK_CUR: ::std::os::raw::c_uint = 1;
pub const SEEK_END: ::std::os::raw::c_uint = 2;
pub const SEEK_SET: ::std::os::raw::c_uint = 0;
pub const FILENAME_MAX: ::std::os::raw::c_uint = 260;
pub const FOPEN_MAX: ::std::os::raw::c_uint = 20;
pub const _SYS_OPEN: ::std::os::raw::c_uint = 20;
pub const TMP_MAX: ::std::os::raw::c_uint = 2147483647;
pub const TMP_MAX_S: ::std::os::raw::c_uint = 2147483647;
pub const _TMP_MAX_S: ::std::os::raw::c_uint = 2147483647;
pub const SYS_OPEN: ::std::os::raw::c_uint = 20;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type max_align_t = f64;
pub type realloc_function =
    ::std::option::Option<unsafe extern "C" fn(ptr:
                                                   *mut ::std::os::raw::c_void,
                                               size: usize,
                                               user_data:
                                                   *mut ::std::os::raw::c_void)
                              -> *mut ::std::os::raw::c_void>;
extern "C" {
    pub fn ht_allocator_set(func: realloc_function,
                            user_data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn ht_alloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ht_realloc(ptr: *mut ::std::os::raw::c_void, size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ht_free(ptr: *mut ::std::os::raw::c_void);
}
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut va_list, ...);
}
pub type __vcrt_bool = bool;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    #[link_name = "__security_cookie"]
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn();
}
extern "C" {
    pub fn _invoke_watson(_Expression: *const wchar_t,
                          _FunctionName: *const wchar_t,
                          _FileName: *const wchar_t,
                          _LineNo: ::std::os::raw::c_uint, _Reserved: usize);
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    assert_eq!(::std::mem::size_of::<__crt_locale_data_public>() , 16usize ,
               concat ! (
               "Size of: " , stringify ! ( __crt_locale_data_public ) ));
    assert_eq! (::std::mem::align_of::<__crt_locale_data_public>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( __crt_locale_data_public ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __crt_locale_data_public ) ) .
                _locale_pctype as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __crt_locale_data_public ) , "::" , stringify ! (
                _locale_pctype ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __crt_locale_data_public ) ) .
                _locale_mb_cur_max as * const _ as usize } , 8usize , concat !
                (
                "Alignment of field: " , stringify ! (
                __crt_locale_data_public ) , "::" , stringify ! (
                _locale_mb_cur_max ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __crt_locale_data_public ) ) .
                _locale_lc_codepage as * const _ as usize } , 12usize , concat
                ! (
                "Alignment of field: " , stringify ! (
                __crt_locale_data_public ) , "::" , stringify ! (
                _locale_lc_codepage ) ));
}
impl Clone for __crt_locale_data_public {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    assert_eq!(::std::mem::size_of::<__crt_locale_pointers>() , 16usize ,
               concat ! ( "Size of: " , stringify ! ( __crt_locale_pointers )
               ));
    assert_eq! (::std::mem::align_of::<__crt_locale_pointers>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( __crt_locale_pointers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __crt_locale_pointers ) ) . locinfo as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __crt_locale_pointers )
                , "::" , stringify ! ( locinfo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __crt_locale_pointers ) ) . mbcinfo as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __crt_locale_pointers )
                , "::" , stringify ! ( mbcinfo ) ));
}
impl Clone for __crt_locale_pointers {
    fn clone(&self) -> Self { *self }
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    assert_eq!(::std::mem::size_of::<_Mbstatet>() , 8usize , concat ! (
               "Size of: " , stringify ! ( _Mbstatet ) ));
    assert_eq! (::std::mem::align_of::<_Mbstatet>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( _Mbstatet ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _Mbstatet ) ) . _Wchar as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _Mbstatet ) , "::" ,
                stringify ! ( _Wchar ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _Mbstatet ) ) . _Byte as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( _Mbstatet ) , "::" ,
                stringify ! ( _Byte ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _Mbstatet ) ) . _State as * const _ as
                usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( _Mbstatet ) , "::" ,
                stringify ! ( _State ) ));
}
impl Clone for _Mbstatet {
    fn clone(&self) -> Self { *self }
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _Lldiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
#[test]
fn bindgen_test_layout__Lldiv_t() {
    assert_eq!(::std::mem::size_of::<_Lldiv_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( _Lldiv_t ) ));
    assert_eq! (::std::mem::align_of::<_Lldiv_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _Lldiv_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _Lldiv_t ) ) . quot as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _Lldiv_t ) , "::" ,
                stringify ! ( quot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _Lldiv_t ) ) . rem as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _Lldiv_t ) , "::" ,
                stringify ! ( rem ) ));
}
impl Clone for _Lldiv_t {
    fn clone(&self) -> Self { *self }
}
pub type imaxdiv_t = _Lldiv_t;
extern "C" {
    pub fn imaxabs(_Number: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(_Numerator: intmax_t, _Denominator: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(_String: *const ::std::os::raw::c_char,
                     _EndPtr: *mut *mut ::std::os::raw::c_char,
                     _Radix: ::std::os::raw::c_int) -> intmax_t;
}
extern "C" {
    pub fn _strtoimax_l(_String: *const ::std::os::raw::c_char,
                        _EndPtr: *mut *mut ::std::os::raw::c_char,
                        _Radix: ::std::os::raw::c_int, _Locale: _locale_t)
     -> intmax_t;
}
extern "C" {
    pub fn strtoumax(_String: *const ::std::os::raw::c_char,
                     _EndPtr: *mut *mut ::std::os::raw::c_char,
                     _Radix: ::std::os::raw::c_int) -> uintmax_t;
}
extern "C" {
    pub fn _strtoumax_l(_String: *const ::std::os::raw::c_char,
                        _EndPtr: *mut *mut ::std::os::raw::c_char,
                        _Radix: ::std::os::raw::c_int, _Locale: _locale_t)
     -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                     _Radix: ::std::os::raw::c_int) -> intmax_t;
}
extern "C" {
    pub fn _wcstoimax_l(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                        _Radix: ::std::os::raw::c_int, _Locale: _locale_t)
     -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                     _Radix: ::std::os::raw::c_int) -> uintmax_t;
}
extern "C" {
    pub fn _wcstoumax_l(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                        _Radix: ::std::os::raw::c_int, _Locale: _locale_t)
     -> uintmax_t;
}
pub type HT_EventKlassId = u32;
pub type HT_TimestampNs = u64;
pub type HT_EventId = u64;
pub type HT_DurationNs = u64;
pub type HT_Boolean = ::std::os::raw::c_int;
pub type TEventPtr = *mut u8;
pub type HT_ThreadId = u32;
pub type HT_Byte = u8;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum HT_ErrorCode {
    HT_ERR_OK = 0,
    HT_ERR_OUT_OF_MEMORY = 1,
    HT_ERR_FEATURE_ALREADY_REGISTERED = 2,
    HT_ERR_LISTENER_CONTAINER_ALREADY_REGISTERED = 3,
    HT_ERR_CANT_OPEN_FILE = 4,
    HT_ERR_CANT_START_TCP_SERVER = 5,
    HT_ERR_CANT_CREATE_LISTENER_CONTAINER = 6,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum MKCREFLECT_Types {
    MKCREFLECT_TYPES_STRUCT = 1,
    MKCREFLECT_TYPES_STRING = 2,
    MKCREFLECT_TYPES_INTEGER = 3,
    MKCREFLECT_TYPES_FLOAT = 4,
    MKCREFLECT_TYPES_DOUBLE = 5,
    MKCREFLECT_TYPES_POINTER = 6,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _MKCREFLECT_FieldInfo {
    pub field_type: *const ::std::os::raw::c_char,
    pub field_name: *const ::std::os::raw::c_char,
    pub size: usize,
    pub offset: usize,
    pub is_signed: ::std::os::raw::c_int,
    pub array_size: ::std::os::raw::c_int,
    pub data_type: MKCREFLECT_Types,
}
#[test]
fn bindgen_test_layout__MKCREFLECT_FieldInfo() {
    assert_eq!(::std::mem::size_of::<_MKCREFLECT_FieldInfo>() , 48usize ,
               concat ! ( "Size of: " , stringify ! ( _MKCREFLECT_FieldInfo )
               ));
    assert_eq! (::std::mem::align_of::<_MKCREFLECT_FieldInfo>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _MKCREFLECT_FieldInfo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _MKCREFLECT_FieldInfo ) ) . field_type as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _MKCREFLECT_FieldInfo )
                , "::" , stringify ! ( field_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _MKCREFLECT_FieldInfo ) ) . field_name as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _MKCREFLECT_FieldInfo )
                , "::" , stringify ! ( field_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _MKCREFLECT_FieldInfo ) ) . size as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _MKCREFLECT_FieldInfo )
                , "::" , stringify ! ( size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _MKCREFLECT_FieldInfo ) ) . offset as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( _MKCREFLECT_FieldInfo )
                , "::" , stringify ! ( offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _MKCREFLECT_FieldInfo ) ) . is_signed as
                * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( _MKCREFLECT_FieldInfo )
                , "::" , stringify ! ( is_signed ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _MKCREFLECT_FieldInfo ) ) . array_size as
                * const _ as usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( _MKCREFLECT_FieldInfo )
                , "::" , stringify ! ( array_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _MKCREFLECT_FieldInfo ) ) . data_type as
                * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( _MKCREFLECT_FieldInfo )
                , "::" , stringify ! ( data_type ) ));
}
impl Clone for _MKCREFLECT_FieldInfo {
    fn clone(&self) -> Self { *self }
}
pub type MKCREFLECT_FieldInfo = _MKCREFLECT_FieldInfo;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _MKCREFLECT_TypeInfo {
    pub name: *const ::std::os::raw::c_char,
    pub fields_count: usize,
    pub size: usize,
    pub packed_size: usize,
    pub fields: *mut MKCREFLECT_FieldInfo,
}
#[test]
fn bindgen_test_layout__MKCREFLECT_TypeInfo() {
    assert_eq!(::std::mem::size_of::<_MKCREFLECT_TypeInfo>() , 40usize ,
               concat ! ( "Size of: " , stringify ! ( _MKCREFLECT_TypeInfo )
               ));
    assert_eq! (::std::mem::align_of::<_MKCREFLECT_TypeInfo>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _MKCREFLECT_TypeInfo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _MKCREFLECT_TypeInfo ) ) . name as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _MKCREFLECT_TypeInfo )
                , "::" , stringify ! ( name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _MKCREFLECT_TypeInfo ) ) . fields_count
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _MKCREFLECT_TypeInfo )
                , "::" , stringify ! ( fields_count ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _MKCREFLECT_TypeInfo ) ) . size as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _MKCREFLECT_TypeInfo )
                , "::" , stringify ! ( size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _MKCREFLECT_TypeInfo ) ) . packed_size as
                * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( _MKCREFLECT_TypeInfo )
                , "::" , stringify ! ( packed_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _MKCREFLECT_TypeInfo ) ) . fields as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( _MKCREFLECT_TypeInfo )
                , "::" , stringify ! ( fields ) ));
}
impl Clone for _MKCREFLECT_TypeInfo {
    fn clone(&self) -> Self { *self }
}
pub type MKCREFLECT_TypeInfo = _MKCREFLECT_TypeInfo;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _HT_EventKlass {
    pub type_info: *mut MKCREFLECT_TypeInfo,
    pub serialize: ::std::option::Option<unsafe extern "C" fn(event:
                                                                  *mut HT_Event,
                                                              buffer:
                                                                  *mut HT_Byte)
                                             -> usize>,
    pub get_size: ::std::option::Option<unsafe extern "C" fn(event:
                                                                 *mut HT_Event)
                                            -> usize>,
    pub klass_id: HT_EventKlassId,
}
#[test]
fn bindgen_test_layout__HT_EventKlass() {
    assert_eq!(::std::mem::size_of::<_HT_EventKlass>() , 32usize , concat ! (
               "Size of: " , stringify ! ( _HT_EventKlass ) ));
    assert_eq! (::std::mem::align_of::<_HT_EventKlass>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _HT_EventKlass ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _HT_EventKlass ) ) . type_info as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _HT_EventKlass ) , "::"
                , stringify ! ( type_info ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _HT_EventKlass ) ) . serialize as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _HT_EventKlass ) , "::"
                , stringify ! ( serialize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _HT_EventKlass ) ) . get_size as * const
                _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _HT_EventKlass ) , "::"
                , stringify ! ( get_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _HT_EventKlass ) ) . klass_id as * const
                _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( _HT_EventKlass ) , "::"
                , stringify ! ( klass_id ) ));
}
impl Clone for _HT_EventKlass {
    fn clone(&self) -> Self { *self }
}
pub type HT_EventKlass = _HT_EventKlass;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct HT_Event {
    pub klass: *mut HT_EventKlass,
    pub timestamp: HT_TimestampNs,
    pub id: HT_EventId,
}
#[test]
fn bindgen_test_layout_HT_Event() {
    assert_eq!(::std::mem::size_of::<HT_Event>() , 24usize , concat ! (
               "Size of: " , stringify ! ( HT_Event ) ));
    assert_eq! (::std::mem::align_of::<HT_Event>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( HT_Event ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const HT_Event ) ) . klass as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( HT_Event ) , "::" ,
                stringify ! ( klass ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const HT_Event ) ) . timestamp as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( HT_Event ) , "::" ,
                stringify ! ( timestamp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const HT_Event ) ) . id as * const _ as usize }
                , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( HT_Event ) , "::" ,
                stringify ! ( id ) ));
}
impl Clone for HT_Event {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn mkcreflect_get_HT_Event_type_info() -> *mut MKCREFLECT_TypeInfo;
}
extern "C" {
    pub fn ht_HT_Event_get_event_klass_instance() -> *mut HT_EventKlass;
}
extern "C" {
    pub fn ht_HT_Event_register_event_klass() -> HT_EventKlassId;
}
extern "C" {
    pub fn ht_HT_Event_get_size(event: *mut HT_Event) -> usize;
}
extern "C" {
    pub fn ht_HT_Event_fnc_serialize(event: *mut HT_Event,
                                     buffer: *mut HT_Byte) -> usize;
}
extern "C" {
    pub fn ht_monotonic_clock_get_timestamp() -> HT_TimestampNs;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HT_TimelineListenerContainer {
    _unused: [u8; 0],
}
pub type HT_TimelineListenerContainer = _HT_TimelineListenerContainer;
pub type HT_TimelineListenerCallback =
    ::std::option::Option<unsafe extern "C" fn(events: TEventPtr,
                                               event_count: usize,
                                               serialized: HT_Boolean,
                                               user_data:
                                                   *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn ht_timeline_listener_container_create()
     -> *mut HT_TimelineListenerContainer;
}
extern "C" {
    pub fn ht_timeline_listener_container_unref(container:
                                                    *mut HT_TimelineListenerContainer);
}
extern "C" {
    pub fn ht_timeline_listener_container_register_listener(container:
                                                                *mut HT_TimelineListenerContainer,
                                                            callback:
                                                                HT_TimelineListenerCallback,
                                                            user_data:
                                                                *mut ::std::os::raw::c_void)
     -> HT_ErrorCode;
}
extern "C" {
    pub fn ht_timeline_listener_container_unregister_all_listeners(container:
                                                                       *mut HT_TimelineListenerContainer);
}
extern "C" {
    pub fn ht_find_or_create_listener(name: *const ::std::os::raw::c_char)
     -> *mut HT_TimelineListenerContainer;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HT_EventIdProvider {
    _unused: [u8; 0],
}
pub type HT_EventIdProvider = _HT_EventIdProvider;
extern "C" {
    pub fn ht_event_id_provider_get_default() -> *mut HT_EventIdProvider;
}
extern "C" {
    pub fn ht_event_id_provider_create() -> *mut HT_EventIdProvider;
}
extern "C" {
    pub fn ht_event_id_provider_destroy(provider: *mut HT_EventIdProvider);
}
extern "C" {
    pub fn ht_event_id_provider_next(provider: *mut HT_EventIdProvider)
     -> HT_EventId;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HT_Timeline {
    _unused: [u8; 0],
}
pub type HT_Timeline = _HT_Timeline;
extern "C" {
    pub fn ht_timeline_create(buffer_capacity: usize, thread_safe: HT_Boolean,
                              serialize_events: HT_Boolean,
                              listeners: *const ::std::os::raw::c_char,
                              out_err: *mut HT_ErrorCode) -> *mut HT_Timeline;
}
extern "C" {
    pub fn ht_timeline_destroy(timeline: *mut HT_Timeline);
}
extern "C" {
    pub fn ht_timeline_register_listener(timeline: *mut HT_Timeline,
                                         callback:
                                             HT_TimelineListenerCallback,
                                         user_data:
                                             *mut ::std::os::raw::c_void)
     -> HT_ErrorCode;
}
extern "C" {
    pub fn ht_timeline_unregister_all_listeners(timeline: *mut HT_Timeline);
}
extern "C" {
    pub fn ht_timeline_init_event(timeline: *mut HT_Timeline,
                                  event: *mut HT_Event);
}
extern "C" {
    pub fn ht_timeline_push_event(timeline: *mut HT_Timeline,
                                  event: *mut HT_Event);
}
extern "C" {
    pub fn ht_timeline_flush(timeline: *mut HT_Timeline);
}
extern "C" {
    pub fn ht_timeline_set_feature(timeline: *mut HT_Timeline,
                                   feature_id: usize,
                                   feature: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn ht_timeline_get_feature(timeline: *mut HT_Timeline,
                                   feature_id: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ht_timeline_get_id_provider(timeline: *mut HT_Timeline)
     -> *mut HT_EventIdProvider;
}
pub type HT_FeatureDisableCallback =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut HT_Timeline)>;
extern "C" {
    pub fn ht_registry_register_feature(feature_id: u32,
                                        disable_callback:
                                            HT_FeatureDisableCallback)
     -> HT_ErrorCode;
}
extern "C" {
    pub fn ht_registry_register_event_klass(event_klass: *mut HT_EventKlass)
     -> HT_EventKlassId;
}
extern "C" {
    pub fn ht_registry_push_klass_info_event(timeline: *mut HT_Timeline,
                                             klass: *mut HT_EventKlass);
}
extern "C" {
    pub fn ht_registry_push_all_klass_info_events(timeline: *mut HT_Timeline);
}
extern "C" {
    pub fn ht_registry_get_event_klasses(out_klass_count: *mut usize)
     -> *mut *mut HT_EventKlass;
}
extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn memchr(_Buf: *const ::std::os::raw::c_void,
                  _Val: ::std::os::raw::c_int, _MaxCount: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(_Buf1: *const ::std::os::raw::c_void,
                  _Buf2: *const ::std::os::raw::c_void, _Size: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(_Dst: *mut ::std::os::raw::c_void,
                  _Src: *const ::std::os::raw::c_void, _Size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(_Dst: *mut ::std::os::raw::c_void,
                   _Src: *const ::std::os::raw::c_void, _Size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(_Dst: *mut ::std::os::raw::c_void,
                  _Val: ::std::os::raw::c_int, _Size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strchr(_Str: *const ::std::os::raw::c_char,
                  _Val: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(_Str: *const ::std::os::raw::c_char,
                   _Ch: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(_Str: *const ::std::os::raw::c_char,
                  _SubStr: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wcschr(_Str: *const wchar_t, _Ch: wchar_t)
     -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn wcsrchr(_Str: *const wchar_t, _Ch: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsstr(_Str: *const wchar_t, _SubStr: *const wchar_t)
     -> *mut wchar_t;
}
extern "C" {
    pub fn _memicmp(_Buf1: *const ::std::os::raw::c_void,
                    _Buf2: *const ::std::os::raw::c_void, _Size: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _memicmp_l(_Buf1: *const ::std::os::raw::c_void,
                      _Buf2: *const ::std::os::raw::c_void, _Size: usize,
                      _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memccpy(_Dst: *mut ::std::os::raw::c_void,
                   _Src: *const ::std::os::raw::c_void,
                   _Val: ::std::os::raw::c_int, _Size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memicmp(_Buf1: *const ::std::os::raw::c_void,
                   _Buf2: *const ::std::os::raw::c_void, _Size: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscat_s(_Destination: *mut wchar_t, _SizeInWords: rsize_t,
                    _Source: *const wchar_t) -> errno_t;
}
extern "C" {
    pub fn wcscpy_s(_Destination: *mut wchar_t, _SizeInWords: rsize_t,
                    _Source: *const wchar_t) -> errno_t;
}
extern "C" {
    pub fn wcsncat_s(_Destination: *mut wchar_t, _SizeInWords: rsize_t,
                     _Source: *const wchar_t, _MaxCount: rsize_t) -> errno_t;
}
extern "C" {
    pub fn wcsncpy_s(_Destination: *mut wchar_t, _SizeInWords: rsize_t,
                     _Source: *const wchar_t, _MaxCount: rsize_t) -> errno_t;
}
extern "C" {
    pub fn wcstok_s(_String: *mut wchar_t, _Delimiter: *const wchar_t,
                    _Context: *mut *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsdup(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscat(_Destination: *mut wchar_t, _Source: *const wchar_t)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wcscmp(_String1: *const wchar_t, _String2: *const wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscpy(_Destination: *mut wchar_t, _Source: *const wchar_t)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wcscspn(_String: *const wchar_t, _Control: *const wchar_t)
     -> usize;
}
extern "C" {
    pub fn wcslen(_String: *const wchar_t) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcsnlen(_Source: *const wchar_t, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn wcsncat(_Destination: *mut wchar_t, _Source: *const wchar_t,
                   _Count: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncmp(_String1: *const wchar_t, _String2: *const wchar_t,
                   _MaxCount: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncpy(_Destination: *mut wchar_t, _Source: *const wchar_t,
                   _Count: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcspbrk(_String: *const wchar_t, _Control: *const wchar_t)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wcsspn(_String: *const wchar_t, _Control: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcstok(_String: *mut wchar_t, _Delimiter: *const wchar_t,
                  _Context: *mut *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcserror(_ErrorNumber: ::std::os::raw::c_int) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcserror_s(_Buffer: *mut wchar_t, _SizeInWords: usize,
                       _ErrorNumber: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __wcserror(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn __wcserror_s(_Buffer: *mut wchar_t, _SizeInWords: usize,
                        _ErrorMessage: *const wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wcsicmp(_String1: *const wchar_t, _String2: *const wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicmp_l(_String1: *const wchar_t, _String2: *const wchar_t,
                      _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicmp(_String1: *const wchar_t, _String2: *const wchar_t,
                     _MaxCount: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicmp_l(_String1: *const wchar_t, _String2: *const wchar_t,
                       _MaxCount: usize, _Locale: _locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnset_s(_Destination: *mut wchar_t, _SizeInWords: usize,
                      _Value: wchar_t, _MaxCount: usize) -> errno_t;
}
extern "C" {
    pub fn _wcsnset(_String: *mut wchar_t, _Value: wchar_t, _MaxCount: usize)
     -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsrev(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsset_s(_Destination: *mut wchar_t, _SizeInWords: usize,
                     _Value: wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wcsset(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcslwr_s(_String: *mut wchar_t, _SizeInWords: usize) -> errno_t;
}
extern "C" {
    pub fn _wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcslwr_s_l(_String: *mut wchar_t, _SizeInWords: usize,
                       _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcslwr_l(_String: *mut wchar_t, _Locale: _locale_t)
     -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsupr_s(_String: *mut wchar_t, _Size: usize) -> errno_t;
}
extern "C" {
    pub fn _wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsupr_s_l(_String: *mut wchar_t, _Size: usize,
                       _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcsupr_l(_String: *mut wchar_t, _Locale: _locale_t)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wcsxfrm(_Destination: *mut wchar_t, _Source: *const wchar_t,
                   _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn _wcsxfrm_l(_Destination: *mut wchar_t, _Source: *const wchar_t,
                      _MaxCount: usize, _Locale: _locale_t) -> usize;
}
extern "C" {
    pub fn wcscoll(_String1: *const wchar_t, _String2: *const wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcscoll_l(_String1: *const wchar_t, _String2: *const wchar_t,
                      _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicoll(_String1: *const wchar_t, _String2: *const wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicoll_l(_String1: *const wchar_t, _String2: *const wchar_t,
                       _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsncoll(_String1: *const wchar_t, _String2: *const wchar_t,
                     _MaxCount: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsncoll_l(_String1: *const wchar_t, _String2: *const wchar_t,
                       _MaxCount: usize, _Locale: _locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicoll(_String1: *const wchar_t, _String2: *const wchar_t,
                      _MaxCount: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicoll_l(_String1: *const wchar_t, _String2: *const wchar_t,
                        _MaxCount: usize, _Locale: _locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsdup(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsicmp(_String1: *const wchar_t, _String2: *const wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnicmp(_String1: *const wchar_t, _String2: *const wchar_t,
                    _MaxCount: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnset(_String: *mut wchar_t, _Value: wchar_t, _MaxCount: usize)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrev(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsset(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsicoll(_String1: *const wchar_t, _String2: *const wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy_s(_Destination: *mut ::std::os::raw::c_char,
                    _SizeInBytes: rsize_t,
                    _Source: *const ::std::os::raw::c_char) -> errno_t;
}
extern "C" {
    pub fn strcat_s(_Destination: *mut ::std::os::raw::c_char,
                    _SizeInBytes: rsize_t,
                    _Source: *const ::std::os::raw::c_char) -> errno_t;
}
extern "C" {
    pub fn strerror_s(_Buffer: *mut ::std::os::raw::c_char,
                      _SizeInBytes: usize,
                      _ErrorNumber: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn strncat_s(_Destination: *mut ::std::os::raw::c_char,
                     _SizeInBytes: rsize_t,
                     _Source: *const ::std::os::raw::c_char,
                     _MaxCount: rsize_t) -> errno_t;
}
extern "C" {
    pub fn strncpy_s(_Destination: *mut ::std::os::raw::c_char,
                     _SizeInBytes: rsize_t,
                     _Source: *const ::std::os::raw::c_char,
                     _MaxCount: rsize_t) -> errno_t;
}
extern "C" {
    pub fn strtok_s(_String: *mut ::std::os::raw::c_char,
                    _Delimiter: *const ::std::os::raw::c_char,
                    _Context: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _memccpy(_Dst: *mut ::std::os::raw::c_void,
                    _Src: *const ::std::os::raw::c_void,
                    _Val: ::std::os::raw::c_int, _MaxCount: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(_Destination: *mut ::std::os::raw::c_char,
                  _Source: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(_Str1: *const ::std::os::raw::c_char,
                  _Str2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strcmpi(_String1: *const ::std::os::raw::c_char,
                    _String2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(_String1: *const ::std::os::raw::c_char,
                   _String2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strcoll_l(_String1: *const ::std::os::raw::c_char,
                      _String2: *const ::std::os::raw::c_char,
                      _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(_Destination: *mut ::std::os::raw::c_char,
                  _Source: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(_Str: *const ::std::os::raw::c_char,
                   _Control: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strdup(_Source: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strerror(_ErrorMessage: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strerror_s(_Buffer: *mut ::std::os::raw::c_char,
                       _SizeInBytes: usize,
                       _ErrorMessage: *const ::std::os::raw::c_char)
     -> errno_t;
}
extern "C" {
    pub fn strerror(_ErrorMessage: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _stricmp(_String1: *const ::std::os::raw::c_char,
                    _String2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricoll(_String1: *const ::std::os::raw::c_char,
                     _String2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricoll_l(_String1: *const ::std::os::raw::c_char,
                       _String2: *const ::std::os::raw::c_char,
                       _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricmp_l(_String1: *const ::std::os::raw::c_char,
                      _String2: *const ::std::os::raw::c_char,
                      _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strlen(_Str: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strlwr_s(_String: *mut ::std::os::raw::c_char, _Size: usize)
     -> errno_t;
}
extern "C" {
    pub fn _strlwr(_String: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strlwr_s_l(_String: *mut ::std::os::raw::c_char, _Size: usize,
                       _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _strlwr_l(_String: *mut ::std::os::raw::c_char, _Locale: _locale_t)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(_Destination: *mut ::std::os::raw::c_char,
                   _Source: *const ::std::os::raw::c_char, _Count: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(_Str1: *const ::std::os::raw::c_char,
                   _Str2: *const ::std::os::raw::c_char, _MaxCount: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicmp(_String1: *const ::std::os::raw::c_char,
                     _String2: *const ::std::os::raw::c_char,
                     _MaxCount: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicmp_l(_String1: *const ::std::os::raw::c_char,
                       _String2: *const ::std::os::raw::c_char,
                       _MaxCount: usize, _Locale: _locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicoll(_String1: *const ::std::os::raw::c_char,
                      _String2: *const ::std::os::raw::c_char,
                      _MaxCount: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicoll_l(_String1: *const ::std::os::raw::c_char,
                        _String2: *const ::std::os::raw::c_char,
                        _MaxCount: usize, _Locale: _locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strncoll(_String1: *const ::std::os::raw::c_char,
                     _String2: *const ::std::os::raw::c_char,
                     _MaxCount: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strncoll_l(_String1: *const ::std::os::raw::c_char,
                       _String2: *const ::std::os::raw::c_char,
                       _MaxCount: usize, _Locale: _locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __strncnt(_String: *const ::std::os::raw::c_char, _Count: usize)
     -> usize;
}
extern "C" {
    pub fn strncpy(_Destination: *mut ::std::os::raw::c_char,
                   _Source: *const ::std::os::raw::c_char, _Count: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(_String: *const ::std::os::raw::c_char, _MaxCount: usize)
     -> usize;
}
extern "C" {
    pub fn _strnset_s(_String: *mut ::std::os::raw::c_char,
                      _SizeInBytes: usize, _Value: ::std::os::raw::c_int,
                      _MaxCount: usize) -> errno_t;
}
extern "C" {
    pub fn _strnset(_Destination: *mut ::std::os::raw::c_char,
                    _Value: ::std::os::raw::c_int, _Count: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(_Str: *const ::std::os::raw::c_char,
                   _Control: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strrev(_Str: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strset_s(_Destination: *mut ::std::os::raw::c_char,
                     _DestinationSize: usize, _Value: ::std::os::raw::c_int)
     -> errno_t;
}
extern "C" {
    pub fn _strset(_Destination: *mut ::std::os::raw::c_char,
                   _Value: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(_Str: *const ::std::os::raw::c_char,
                  _Control: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtok(_String: *mut ::std::os::raw::c_char,
                  _Delimiter: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strupr_s(_String: *mut ::std::os::raw::c_char, _Size: usize)
     -> errno_t;
}
extern "C" {
    pub fn _strupr(_String: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strupr_s_l(_String: *mut ::std::os::raw::c_char, _Size: usize,
                       _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _strupr_l(_String: *mut ::std::os::raw::c_char, _Locale: _locale_t)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(_Destination: *mut ::std::os::raw::c_char,
                   _Source: *const ::std::os::raw::c_char, _MaxCount: usize)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strxfrm_l(_Destination: *mut ::std::os::raw::c_char,
                      _Source: *const ::std::os::raw::c_char,
                      _MaxCount: usize, _Locale: _locale_t) -> usize;
}
extern "C" {
    pub fn strdup(_String: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmpi(_String1: *const ::std::os::raw::c_char,
                   _String2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stricmp(_String1: *const ::std::os::raw::c_char,
                   _String2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strlwr(_String: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnicmp(_String1: *const ::std::os::raw::c_char,
                    _String2: *const ::std::os::raw::c_char, _MaxCount: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strnset(_String: *mut ::std::os::raw::c_char,
                   _Value: ::std::os::raw::c_int, _MaxCount: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrev(_String: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strset(_String: *mut ::std::os::raw::c_char,
                  _Value: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strupr(_String: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct HT_EventKlassInfoEvent {
    pub base: HT_Event,
    pub info_klass_id: HT_EventKlassId,
    pub event_klass_name: *const ::std::os::raw::c_char,
    pub field_count: i8,
}
#[test]
fn bindgen_test_layout_HT_EventKlassInfoEvent() {
    assert_eq!(::std::mem::size_of::<HT_EventKlassInfoEvent>() , 48usize ,
               concat ! ( "Size of: " , stringify ! ( HT_EventKlassInfoEvent )
               ));
    assert_eq! (::std::mem::align_of::<HT_EventKlassInfoEvent>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( HT_EventKlassInfoEvent ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const HT_EventKlassInfoEvent ) ) . base as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( HT_EventKlassInfoEvent
                ) , "::" , stringify ! ( base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const HT_EventKlassInfoEvent ) ) .
                info_klass_id as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( HT_EventKlassInfoEvent
                ) , "::" , stringify ! ( info_klass_id ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const HT_EventKlassInfoEvent ) ) .
                event_klass_name as * const _ as usize } , 32usize , concat !
                (
                "Alignment of field: " , stringify ! ( HT_EventKlassInfoEvent
                ) , "::" , stringify ! ( event_klass_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const HT_EventKlassInfoEvent ) ) . field_count
                as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( HT_EventKlassInfoEvent
                ) , "::" , stringify ! ( field_count ) ));
}
impl Clone for HT_EventKlassInfoEvent {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn mkcreflect_get_HT_EventKlassInfoEvent_type_info()
     -> *mut MKCREFLECT_TypeInfo;
}
extern "C" {
    pub fn ht_HT_EventKlassInfoEvent_get_size(VAR_NAME: *mut HT_Event)
     -> usize;
}
extern "C" {
    pub fn ht_HT_EventKlassInfoEvent_fnc_serialize(VAR_NAME_: *mut HT_Event,
                                                   buffer: *mut HT_Byte)
     -> usize;
}
extern "C" {
    pub fn ht_HT_EventKlassInfoEvent_get_event_klass_instance()
     -> *mut HT_EventKlass;
}
extern "C" {
    pub fn ht_HT_EventKlassInfoEvent_register_event_klass()
     -> HT_EventKlassId;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct HT_EventKlassFieldInfoEvent {
    pub base: HT_Event,
    pub info_klass_id: HT_EventKlassId,
    pub field_type: *const ::std::os::raw::c_char,
    pub field_name: *const ::std::os::raw::c_char,
    pub size: u64,
    pub data_type: u8,
}
#[test]
fn bindgen_test_layout_HT_EventKlassFieldInfoEvent() {
    assert_eq!(::std::mem::size_of::<HT_EventKlassFieldInfoEvent>() , 64usize
               , concat ! (
               "Size of: " , stringify ! ( HT_EventKlassFieldInfoEvent ) ));
    assert_eq! (::std::mem::align_of::<HT_EventKlassFieldInfoEvent>() , 8usize
                , concat ! (
                "Alignment of " , stringify ! ( HT_EventKlassFieldInfoEvent )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const HT_EventKlassFieldInfoEvent ) ) . base as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                HT_EventKlassFieldInfoEvent ) , "::" , stringify ! ( base )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const HT_EventKlassFieldInfoEvent ) ) .
                info_klass_id as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                HT_EventKlassFieldInfoEvent ) , "::" , stringify ! (
                info_klass_id ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const HT_EventKlassFieldInfoEvent ) ) .
                field_type as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                HT_EventKlassFieldInfoEvent ) , "::" , stringify ! (
                field_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const HT_EventKlassFieldInfoEvent ) ) .
                field_name as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! (
                HT_EventKlassFieldInfoEvent ) , "::" , stringify ! (
                field_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const HT_EventKlassFieldInfoEvent ) ) . size as
                * const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! (
                HT_EventKlassFieldInfoEvent ) , "::" , stringify ! ( size )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const HT_EventKlassFieldInfoEvent ) ) .
                data_type as * const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! (
                HT_EventKlassFieldInfoEvent ) , "::" , stringify ! ( data_type
                ) ));
}
impl Clone for HT_EventKlassFieldInfoEvent {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn mkcreflect_get_HT_EventKlassFieldInfoEvent_type_info()
     -> *mut MKCREFLECT_TypeInfo;
}
extern "C" {
    pub fn ht_HT_EventKlassFieldInfoEvent_get_size(VAR_NAME: *mut HT_Event)
     -> usize;
}
extern "C" {
    pub fn ht_HT_EventKlassFieldInfoEvent_fnc_serialize(VAR_NAME_:
                                                            *mut HT_Event,
                                                        buffer: *mut HT_Byte)
     -> usize;
}
extern "C" {
    pub fn ht_HT_EventKlassFieldInfoEvent_get_event_klass_instance()
     -> *mut HT_EventKlass;
}
extern "C" {
    pub fn ht_HT_EventKlassFieldInfoEvent_register_event_klass()
     -> HT_EventKlassId;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct HT_CallstackBaseEvent {
    pub base: HT_Event,
    pub duration: HT_DurationNs,
    pub thread_id: HT_ThreadId,
}
#[test]
fn bindgen_test_layout_HT_CallstackBaseEvent() {
    assert_eq!(::std::mem::size_of::<HT_CallstackBaseEvent>() , 40usize ,
               concat ! ( "Size of: " , stringify ! ( HT_CallstackBaseEvent )
               ));
    assert_eq! (::std::mem::align_of::<HT_CallstackBaseEvent>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( HT_CallstackBaseEvent ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const HT_CallstackBaseEvent ) ) . base as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( HT_CallstackBaseEvent )
                , "::" , stringify ! ( base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const HT_CallstackBaseEvent ) ) . duration as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( HT_CallstackBaseEvent )
                , "::" , stringify ! ( duration ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const HT_CallstackBaseEvent ) ) . thread_id as
                * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( HT_CallstackBaseEvent )
                , "::" , stringify ! ( thread_id ) ));
}
impl Clone for HT_CallstackBaseEvent {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn mkcreflect_get_HT_CallstackBaseEvent_type_info()
     -> *mut MKCREFLECT_TypeInfo;
}
extern "C" {
    pub fn ht_HT_CallstackBaseEvent_get_size(VAR_NAME: *mut HT_Event)
     -> usize;
}
extern "C" {
    pub fn ht_HT_CallstackBaseEvent_fnc_serialize(VAR_NAME_: *mut HT_Event,
                                                  buffer: *mut HT_Byte)
     -> usize;
}
extern "C" {
    pub fn ht_HT_CallstackBaseEvent_get_event_klass_instance()
     -> *mut HT_EventKlass;
}
extern "C" {
    pub fn ht_HT_CallstackBaseEvent_register_event_klass() -> HT_EventKlassId;
}
pub type HT_CallstackEventLabel = u64;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct HT_CallstackIntEvent {
    pub base: HT_CallstackBaseEvent,
    pub label: HT_CallstackEventLabel,
}
#[test]
fn bindgen_test_layout_HT_CallstackIntEvent() {
    assert_eq!(::std::mem::size_of::<HT_CallstackIntEvent>() , 48usize ,
               concat ! ( "Size of: " , stringify ! ( HT_CallstackIntEvent )
               ));
    assert_eq! (::std::mem::align_of::<HT_CallstackIntEvent>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( HT_CallstackIntEvent ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const HT_CallstackIntEvent ) ) . base as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( HT_CallstackIntEvent )
                , "::" , stringify ! ( base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const HT_CallstackIntEvent ) ) . label as *
                const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( HT_CallstackIntEvent )
                , "::" , stringify ! ( label ) ));
}
impl Clone for HT_CallstackIntEvent {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn mkcreflect_get_HT_CallstackIntEvent_type_info()
     -> *mut MKCREFLECT_TypeInfo;
}
extern "C" {
    pub fn ht_HT_CallstackIntEvent_get_size(VAR_NAME: *mut HT_Event) -> usize;
}
extern "C" {
    pub fn ht_HT_CallstackIntEvent_fnc_serialize(VAR_NAME_: *mut HT_Event,
                                                 buffer: *mut HT_Byte)
     -> usize;
}
extern "C" {
    pub fn ht_HT_CallstackIntEvent_get_event_klass_instance()
     -> *mut HT_EventKlass;
}
extern "C" {
    pub fn ht_HT_CallstackIntEvent_register_event_klass() -> HT_EventKlassId;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct HT_CallstackStringEvent {
    pub base: HT_CallstackBaseEvent,
    pub label: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_HT_CallstackStringEvent() {
    assert_eq!(::std::mem::size_of::<HT_CallstackStringEvent>() , 48usize ,
               concat ! (
               "Size of: " , stringify ! ( HT_CallstackStringEvent ) ));
    assert_eq! (::std::mem::align_of::<HT_CallstackStringEvent>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( HT_CallstackStringEvent ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const HT_CallstackStringEvent ) ) . base as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( HT_CallstackStringEvent
                ) , "::" , stringify ! ( base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const HT_CallstackStringEvent ) ) . label as *
                const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( HT_CallstackStringEvent
                ) , "::" , stringify ! ( label ) ));
}
impl Clone for HT_CallstackStringEvent {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn mkcreflect_get_HT_CallstackStringEvent_type_info()
     -> *mut MKCREFLECT_TypeInfo;
}
extern "C" {
    pub fn ht_HT_CallstackStringEvent_get_size(VAR_NAME: *mut HT_Event)
     -> usize;
}
extern "C" {
    pub fn ht_HT_CallstackStringEvent_fnc_serialize(VAR_NAME_: *mut HT_Event,
                                                    buffer: *mut HT_Byte)
     -> usize;
}
extern "C" {
    pub fn ht_HT_CallstackStringEvent_get_event_klass_instance()
     -> *mut HT_EventKlass;
}
extern "C" {
    pub fn ht_HT_CallstackStringEvent_register_event_klass()
     -> HT_EventKlassId;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct HT_StringMappingEvent {
    pub base: HT_Event,
    pub identifier: u64,
    pub label: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_HT_StringMappingEvent() {
    assert_eq!(::std::mem::size_of::<HT_StringMappingEvent>() , 40usize ,
               concat ! ( "Size of: " , stringify ! ( HT_StringMappingEvent )
               ));
    assert_eq! (::std::mem::align_of::<HT_StringMappingEvent>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( HT_StringMappingEvent ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const HT_StringMappingEvent ) ) . base as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( HT_StringMappingEvent )
                , "::" , stringify ! ( base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const HT_StringMappingEvent ) ) . identifier as
                * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( HT_StringMappingEvent )
                , "::" , stringify ! ( identifier ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const HT_StringMappingEvent ) ) . label as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( HT_StringMappingEvent )
                , "::" , stringify ! ( label ) ));
}
impl Clone for HT_StringMappingEvent {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn mkcreflect_get_HT_StringMappingEvent_type_info()
     -> *mut MKCREFLECT_TypeInfo;
}
extern "C" {
    pub fn ht_HT_StringMappingEvent_get_size(VAR_NAME: *mut HT_Event)
     -> usize;
}
extern "C" {
    pub fn ht_HT_StringMappingEvent_fnc_serialize(VAR_NAME_: *mut HT_Event,
                                                  buffer: *mut HT_Byte)
     -> usize;
}
extern "C" {
    pub fn ht_HT_StringMappingEvent_get_event_klass_instance()
     -> *mut HT_EventKlass;
}
extern "C" {
    pub fn ht_HT_StringMappingEvent_register_event_klass() -> HT_EventKlassId;
}
extern "C" {
    pub fn ht_feature_cached_string_enable(timeline: *mut HT_Timeline)
     -> HT_ErrorCode;
}
extern "C" {
    pub fn ht_feature_cached_string_disable(timeline: *mut HT_Timeline);
}
extern "C" {
    pub fn ht_feature_cached_string_add_mapping(timeline: *mut HT_Timeline,
                                                label:
                                                    *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ht_feature_cached_string_push_map(timeline: *mut HT_Timeline);
}
extern "C" {
    pub fn ht_feature_callstack_enable(timeline: *mut HT_Timeline)
     -> HT_ErrorCode;
}
extern "C" {
    pub fn ht_feature_callstack_disable(timeline: *mut HT_Timeline);
}
extern "C" {
    pub fn ht_feature_callstack_start(timeline: *mut HT_Timeline,
                                      event: *mut HT_CallstackBaseEvent);
}
extern "C" {
    pub fn ht_feature_callstack_stop(timeline: *mut HT_Timeline);
}
extern "C" {
    pub fn ht_feature_callstack_start_int(timeline: *mut HT_Timeline,
                                          label: HT_CallstackEventLabel);
}
extern "C" {
    pub fn ht_feature_callstack_start_string(timeline: *mut HT_Timeline,
                                             label:
                                                 *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn ht_global_timeline_get() -> *mut HT_Timeline;
}
extern "C" {
    pub fn ht_init(argc: ::std::os::raw::c_int,
                   argv: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn ht_deinit();
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__iobuf() {
    assert_eq!(::std::mem::size_of::<_iobuf>() , 8usize , concat ! (
               "Size of: " , stringify ! ( _iobuf ) ));
    assert_eq! (::std::mem::align_of::<_iobuf>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _iobuf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _iobuf ) ) . _Placeholder as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _iobuf ) , "::" ,
                stringify ! ( _Placeholder ) ));
}
impl Clone for _iobuf {
    fn clone(&self) -> Self { *self }
}
pub type FILE = _iobuf;
extern "C" {
    pub fn __acrt_iob_func(_Ix: ::std::os::raw::c_uint) -> *mut FILE;
}
extern "C" {
    pub fn fgetwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fgetwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn getwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fgetws(_Buffer: *mut wchar_t, _BufferCount: ::std::os::raw::c_int,
                  _Stream: *mut FILE) -> *mut wchar_t;
}
extern "C" {
    pub fn fputws(_Buffer: *const wchar_t, _Stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getws_s(_Buffer: *mut wchar_t, _BufferCount: usize)
     -> *mut wchar_t;
}
extern "C" {
    pub fn putwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn _putws(_Buffer: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _wfdopen(_FileHandle: ::std::os::raw::c_int, _Mode: *const wchar_t)
     -> *mut FILE;
}
extern "C" {
    pub fn _wfopen(_FileName: *const wchar_t, _Mode: *const wchar_t)
     -> *mut FILE;
}
extern "C" {
    pub fn _wfopen_s(_Stream: *mut *mut FILE, _FileName: *const wchar_t,
                     _Mode: *const wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wfreopen(_FileName: *const wchar_t, _Mode: *const wchar_t,
                     _OldStream: *mut FILE) -> *mut FILE;
}
extern "C" {
    pub fn _wfreopen_s(_Stream: *mut *mut FILE, _FileName: *const wchar_t,
                       _Mode: *const wchar_t, _OldStream: *mut FILE)
     -> errno_t;
}
extern "C" {
    pub fn _wfsopen(_FileName: *const wchar_t, _Mode: *const wchar_t,
                    _ShFlag: ::std::os::raw::c_int) -> *mut FILE;
}
extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
extern "C" {
    pub fn _wpopen(_Command: *const wchar_t, _Mode: *const wchar_t)
     -> *mut FILE;
}
extern "C" {
    pub fn _wremove(_FileName: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtempnam(_Directory: *const wchar_t, _FilePrefix: *const wchar_t)
     -> *mut wchar_t;
}
extern "C" {
    pub fn _wtmpnam_s(_Buffer: *mut wchar_t, _BufferCount: usize) -> errno_t;
}
extern "C" {
    pub fn _wtmpnam(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _fgetwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _getwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _putwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _ungetwc_nolock(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn __stdio_common_vfwprintf(_Options: ::std::os::raw::c_ulonglong,
                                    _Stream: *mut FILE,
                                    _Format: *const wchar_t,
                                    _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_s(_Options: ::std::os::raw::c_ulonglong,
                                      _Stream: *mut FILE,
                                      _Format: *const wchar_t,
                                      _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_p(_Options: ::std::os::raw::c_ulonglong,
                                      _Stream: *mut FILE,
                                      _Format: *const wchar_t,
                                      _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwscanf(_Options: ::std::os::raw::c_ulonglong,
                                   _Stream: *mut FILE,
                                   _Format: *const wchar_t,
                                   _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf(_Options: ::std::os::raw::c_ulonglong,
                                    _Buffer: *mut wchar_t,
                                    _BufferCount: usize,
                                    _Format: *const wchar_t,
                                    _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_s(_Options: ::std::os::raw::c_ulonglong,
                                      _Buffer: *mut wchar_t,
                                      _BufferCount: usize,
                                      _Format: *const wchar_t,
                                      _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnwprintf_s(_Options: ::std::os::raw::c_ulonglong,
                                       _Buffer: *mut wchar_t,
                                       _BufferCount: usize, _MaxCount: usize,
                                       _Format: *const wchar_t,
                                       _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_p(_Options: ::std::os::raw::c_ulonglong,
                                      _Buffer: *mut wchar_t,
                                      _BufferCount: usize,
                                      _Format: *const wchar_t,
                                      _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswscanf(_Options: ::std::os::raw::c_ulonglong,
                                   _Buffer: *const wchar_t,
                                   _BufferCount: usize,
                                   _Format: *const wchar_t,
                                   _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
}
pub type fpos_t = ::std::os::raw::c_longlong;
extern "C" {
    pub fn _get_stream_buffer_pointers(_Stream: *mut FILE,
                                       _Base:
                                           *mut *mut *mut ::std::os::raw::c_char,
                                       _Pointer:
                                           *mut *mut *mut ::std::os::raw::c_char,
                                       _Count:
                                           *mut *mut ::std::os::raw::c_int)
     -> errno_t;
}
extern "C" {
    pub fn clearerr_s(_Stream: *mut FILE) -> errno_t;
}
extern "C" {
    pub fn fopen_s(_Stream: *mut *mut FILE,
                   _FileName: *const ::std::os::raw::c_char,
                   _Mode: *const ::std::os::raw::c_char) -> errno_t;
}
extern "C" {
    pub fn fread_s(_Buffer: *mut ::std::os::raw::c_void, _BufferSize: usize,
                   _ElementSize: usize, _ElementCount: usize,
                   _Stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn freopen_s(_Stream: *mut *mut FILE,
                     _FileName: *const ::std::os::raw::c_char,
                     _Mode: *const ::std::os::raw::c_char,
                     _OldStream: *mut FILE) -> errno_t;
}
extern "C" {
    pub fn gets_s(_Buffer: *mut ::std::os::raw::c_char, _Size: rsize_t)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile_s(_Stream: *mut *mut FILE) -> errno_t;
}
extern "C" {
    pub fn tmpnam_s(_Buffer: *mut ::std::os::raw::c_char, _Size: rsize_t)
     -> errno_t;
}
extern "C" {
    pub fn clearerr(_Stream: *mut FILE);
}
extern "C" {
    pub fn fclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdopen(_FileHandle: ::std::os::raw::c_int,
                   _Mode: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn feof(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(_Stream: *mut FILE, _Position: *mut fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(_Buffer: *mut ::std::os::raw::c_char,
                 _MaxCount: ::std::os::raw::c_int, _Stream: *mut FILE)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(_FileName: *const ::std::os::raw::c_char,
                 _Mode: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fputc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputchar(_Character: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(_Buffer: *const ::std::os::raw::c_char, _Stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(_Buffer: *mut ::std::os::raw::c_void, _ElementSize: usize,
                 _ElementCount: usize, _Stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn freopen(_FileName: *const ::std::os::raw::c_char,
                   _Mode: *const ::std::os::raw::c_char, _Stream: *mut FILE)
     -> *mut FILE;
}
extern "C" {
    pub fn _fsopen(_FileName: *const ::std::os::raw::c_char,
                   _Mode: *const ::std::os::raw::c_char,
                   _ShFlag: ::std::os::raw::c_int) -> *mut FILE;
}
extern "C" {
    pub fn fsetpos(_Stream: *mut FILE, _Position: *const fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(_Stream: *mut FILE, _Offset: ::std::os::raw::c_long,
                 _Origin: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64(_Stream: *mut FILE, _Offset: ::std::os::raw::c_longlong,
                     _Origin: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fwrite(_Buffer: *const ::std::os::raw::c_void, _ElementSize: usize,
                  _ElementCount: usize, _Stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn getc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getmaxstdio() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(_ErrorMessage: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn _pclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _popen(_Command: *const ::std::os::raw::c_char,
                  _Mode: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn putc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(_Character: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(_Buffer: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putw(_Word: ::std::os::raw::c_int, _Stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(_FileName: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(_OldFileName: *const ::std::os::raw::c_char,
                  _NewFileName: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _unlink(_FileName: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(_FileName: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(_Stream: *mut FILE);
}
extern "C" {
    pub fn _rmtmp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(_Stream: *mut FILE, _Buffer: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn _setmaxstdio(_Maximum: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setvbuf(_Stream: *mut FILE, _Buffer: *mut ::std::os::raw::c_char,
                   _Mode: ::std::os::raw::c_int, _Size: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tempnam(_DirectoryName: *const ::std::os::raw::c_char,
                    _FilePrefix: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(_Buffer: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _lock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _unlock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _fclose_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fflush_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputc_nolock(_Character: ::std::os::raw::c_int,
                         _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fread_nolock(_Buffer: *mut ::std::os::raw::c_void,
                         _ElementSize: usize, _ElementCount: usize,
                         _Stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn _fread_nolock_s(_Buffer: *mut ::std::os::raw::c_void,
                           _BufferSize: usize, _ElementSize: usize,
                           _ElementCount: usize, _Stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn _fseek_nolock(_Stream: *mut FILE, _Offset: ::std::os::raw::c_long,
                         _Origin: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64_nolock(_Stream: *mut FILE,
                            _Offset: ::std::os::raw::c_longlong,
                            _Origin: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ftell_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _fwrite_nolock(_Buffer: *const ::std::os::raw::c_void,
                          _ElementSize: usize, _ElementCount: usize,
                          _Stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn _getc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putc_nolock(_Character: ::std::os::raw::c_int, _Stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ungetc_nolock(_Character: ::std::os::raw::c_int,
                          _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p__commode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf(_Options: ::std::os::raw::c_ulonglong,
                                   _Stream: *mut FILE,
                                   _Format: *const ::std::os::raw::c_char,
                                   _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_s(_Options: ::std::os::raw::c_ulonglong,
                                     _Stream: *mut FILE,
                                     _Format: *const ::std::os::raw::c_char,
                                     _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_p(_Options: ::std::os::raw::c_ulonglong,
                                     _Stream: *mut FILE,
                                     _Format: *const ::std::os::raw::c_char,
                                     _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_printf_count_output(_Value: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_printf_count_output() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfscanf(_Options: ::std::os::raw::c_ulonglong,
                                  _Stream: *mut FILE,
                                  _Format: *const ::std::os::raw::c_char,
                                  _Locale: _locale_t, _Arglist: va_list)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf(_Options: ::std::os::raw::c_ulonglong,
                                   _Buffer: *mut ::std::os::raw::c_char,
                                   _BufferCount: usize,
                                   _Format: *const ::std::os::raw::c_char,
                                   _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_s(_Options: ::std::os::raw::c_ulonglong,
                                     _Buffer: *mut ::std::os::raw::c_char,
                                     _BufferCount: usize,
                                     _Format: *const ::std::os::raw::c_char,
                                     _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnprintf_s(_Options: ::std::os::raw::c_ulonglong,
                                      _Buffer: *mut ::std::os::raw::c_char,
                                      _BufferCount: usize, _MaxCount: usize,
                                      _Format: *const ::std::os::raw::c_char,
                                      _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_p(_Options: ::std::os::raw::c_ulonglong,
                                     _Buffer: *mut ::std::os::raw::c_char,
                                     _BufferCount: usize,
                                     _Format: *const ::std::os::raw::c_char,
                                     _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsscanf(_Options: ::std::os::raw::c_ulonglong,
                                  _Buffer: *const ::std::os::raw::c_char,
                                  _BufferCount: usize,
                                  _Format: *const ::std::os::raw::c_char,
                                  _Locale: _locale_t, _ArgList: va_list)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(_Directory: *const ::std::os::raw::c_char,
                   _FilePrefix: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdopen(_FileHandle: ::std::os::raw::c_int,
                  _Format: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(_Ch: ::std::os::raw::c_int, _Stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmtmp() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HT_FileDumpListener {
    _unused: [u8; 0],
}
pub type HT_FileDumpListener = _HT_FileDumpListener;
extern "C" {
    pub fn ht_file_dump_listener_create(filename:
                                            *const ::std::os::raw::c_char,
                                        buffer_size: usize,
                                        out_err: *mut HT_ErrorCode)
     -> *mut HT_FileDumpListener;
}
extern "C" {
    pub fn ht_file_dump_listener_destroy(listener: *mut HT_FileDumpListener);
}
extern "C" {
    pub fn ht_file_dump_listener_callback(events: TEventPtr, size: usize,
                                          serialized: HT_Boolean,
                                          user_data:
                                              *mut ::std::os::raw::c_void);
}
pub type HT_TaskCallback =
    ::std::option::Option<unsafe extern "C" fn(user_data:
                                                   *mut ::std::os::raw::c_void)>;
pub type HT_TaskId = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HT_Task {
    _unused: [u8; 0],
}
pub type HT_Task = _HT_Task;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum HT_TaskSchedulingMode {
    HT_TASK_SCHEDULING_IGNORE_DELAYS = 0,
    HT_TASK_SCHEDULING_RESTART_TIMER = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HT_TaskScheduler {
    _unused: [u8; 0],
}
pub type HT_TaskScheduler = _HT_TaskScheduler;
extern "C" {
    pub fn ht_task_scheduler_create(out_err: *mut HT_ErrorCode)
     -> *mut HT_TaskScheduler;
}
extern "C" {
    pub fn ht_task_scheduler_destroy(task_scheduler: *mut HT_TaskScheduler);
}
extern "C" {
    pub fn ht_task_scheduler_schedule_task(task_scheduler:
                                               *mut HT_TaskScheduler,
                                           mode: HT_TaskSchedulingMode,
                                           period: HT_DurationNs,
                                           callback: HT_TaskCallback,
                                           user_data:
                                               *mut ::std::os::raw::c_void)
     -> HT_TaskId;
}
extern "C" {
    pub fn ht_task_scheduler_remove_task(task_scheduler:
                                             *mut HT_TaskScheduler,
                                         task_id: HT_TaskId) -> HT_Boolean;
}
extern "C" {
    pub fn ht_task_scheduler_tick(task_scheduler: *mut HT_TaskScheduler);
}
extern "C" {
    pub fn ht_task_scheduler_get_optimal_tick_period(task_scheduler:
                                                         *mut HT_TaskScheduler)
     -> HT_DurationNs;
}
extern "C" {
    pub fn ht_thread_get_current_thread_id() -> HT_ThreadId;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __crt_locale_data {
    pub _address: u8,
}
impl Clone for __crt_locale_data {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
impl Clone for __crt_multibyte_data {
    fn clone(&self) -> Self { *self }
}
